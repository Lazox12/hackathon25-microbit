<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="WfagqN.-kPMijZ[z46DB" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Cim@/PW^u$~z_;^nTVIg"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum ServoNum{" line1="    ServoNum0 = 0," line2="    ServoNum1 = 1," line3="    ServoNum2 = 2," line4="    ServoNum3 = 3," line5="    ServoNum4 = 4," line6="    ServoNum5 = 5" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="lf%+-1REqteCUl|.,wJW"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace hackathon {" line1="    class Robot {" line2="        x:number" line3="        y:number" line4="        z:number" line5="        address:number" line6="        speedMultiplyer:number" line7="        delay:number" line8="        angles:number[] = []; " line9="        constructor(address:number = 64,speedMultiplyer:number = 1,delay:number = 100) {" line10="            this.speedMultiplyer = speedMultiplyer;" line11="            this.delay = delay;" line12="            this.address = address;" line13="        }" line14="        public move(x: number, y: number, z: number) {" line15="            this.x,this.y,this.z = x,y,z;" line16="            const a = 30 //délka první část" line17="            const b = 20 //délka druhé části" line18="            const o = 30 //offset středu soustavy oproti středu robota" line19="            const p = 10 //výška postavy oproti pracovní ploše" line20="            const e = 5  //vzálenost POI od posedního kloubu" line21="            const c = Math.sqrt((x ** 2) + ((o - y) ** 2) + ((z + e - p) ** 2));" line22="            //console.log(c)" line23="" line24="            const r1 = Math.atan(((-1) * x) / (o - y)) / (2 * Math.PI) * 360;" line25="" line26="            const r2a = Math.acos(Math.sqrt((x ** 2) + ((o - y) ** 2)) / c);" line27="            const r2b = Math.acos(((a ** 2) + (c ** 2) - (b ** 2)) / (2 * a * c))" line28="            //console.log(r2a, r2b)" line29="            let r2 = 0" line30="            if ((z + e - p) &gt; 0) {" line31="                r2 = r2b + r2a;" line32="            } else {" line33="                r2 = r2b - r2a;" line34="            }" line35="            r2 = r2 / (2 * Math.PI) * 360;" line36="" line37="            const r3 = Math.acos(((a ** 2) + (b ** 2) - (c ** 2)) / (2 * a * b)) / (2 * Math.PI) * 360;" line38="" line39="            const r4 = r2 + r3 - 90;" line40="" line41="            const r5 = (-1) * r1;" line42="" line43="" line44="            function checkValues():boolean{" line45="                if (c &gt;= a + b) {" line46="                    console.log('Bod je mimo dosah!')" line47="                    return false" line48="                }" line49="" line50="                if (r1 &gt; 90 || r1 &lt; -90) {" line51="                    console.log('Bod je mimo pracovní plochu!')" line52="                    return false" line53="                }" line54="" line55="                if (r2 &gt; 90 || r2 &lt; 0 || r3 &gt; 180 || r3 &lt; 0) {" line56="                    console.log('Neplatné úhly kloubů!')" line57="                    return false" line58="                }" line59="                return true" line60="            }" line61="            if(!checkValues()){" line62="                return" line63="            }" line64="            setAngle(0,r1);" line65="            setAngle(1, r2);" line66="            setAngle(2, r3);" line67="            setAngle(3, r4);" line68="            setAngle(4, r5);" line69="        }" line70="        public setAngle(servo: ServoNum, target: number) {" line71="            let lastAngle: number = this.angles[servo as number];" line72="            this.angles[servo as number] = target;" line73="            if(this.speedMultiplyer ==1){" line74="                PCA9685.setServoPosition(servo as number, target, 64);" line75="                return;" line76="            }" line77="            const itnum:number = (Math.round(1-this.speedMultiplyer)*100+1);" line78="            let angle:number = (lastAngle-target)/itnum;" line79="            for(let i:number=0;i&lt;itnum;i++){" line80="                PCA9685.setServoPosition(servo as number, angle++, 64);" line81="                basic.pause(this.delay);" line82="            }" line83="        }" line84="    }" line85="" line86="    //% fixedInstance" line87="    export let robot: Robot = new Robot();" line88="    //% block=&quot;move to|x:$x|y:$y|z:$z&quot;" line89="    export function move(x:number,y:number,z:number) {" line90="        robot.move(x,y,z);" line91="    }" line92="    //% block=&quot;set servo angle|servo:$servo|angle:$angle&quot;" line93="    export function setAngle(servo:number,angle:number){" line94="        robot.setAngle(servo,angle);" line95="    }" line96="    //% block=&quot;x&quot;" line97="    export function x():number{" line98="        return robot.x;" line99="    }" line100="    //% block=&quot;y&quot;" line101="    export function y(): number {" line102="        return robot.y;" line103="    }" line104="    //% block=&quot;x&quot;" line105="    export function z(): number {" line106="        return robot.z;" line107="    }" line108="    //% block=&quot;get angle|servo: $servo&quot;" line109="    export function getAngle(servo:ServoNum):number{" line110="        return robot.angles[servo as number];" line111="    }" line112="    //% block=&quot;set i2c address|address: $address&quot;" line113="    export function setAddress(address:number){" line114="        robot.address = address;" line115="    }" line116="    //% block=&quot;set robot speed|speed: $speed&quot;" line117="    //% v.min=0 v.max=1 v.defl=1" line118="    export function setSpeed(speed: number) {" line119="        robot.speedMultiplyer = speed;" line120="    }" line121="}" numlines="122"></mutation></block></next></block></statement></block></xml>